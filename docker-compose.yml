################### Create t2_proxy network
# docker network create t2_proxy
# docker network create socket_proxy
# Alternatively, you can specify the gateway and subnet to use
# docker network create --gateway 192.168.90.1 --subnet 192.168.90.0/24 t2_proxy
# docker network create --gateway 192.168.91.1 --subnet 192.168.91.0/24 socket_proxy
# Subnet range 192.168.0.0/16 covers 192.168.0.0 to 192.168.255.255


######### NETWORKS
networks:
  t2_proxy:
    external: true
    name: t2_proxy
  default:
    driver: bridge
  socket_proxy:
    external: true
    name: socket_proxy

######### VOLUMES
volumes:
  homeassistant_config:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/docker/homeassistant
  hydra_config:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/docker/hydra
  authelia_config:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/docker/authelia
  radarr_config:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/docker/radarr
  bazarr_config:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/docker/bazarr
  sonarr_config:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/docker/sonarr
  sabnzb_config:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/docker/sabnzb
  traefik_config:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/docker/traefik2
  traefik_acme_config:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,ro,nfsvers=4.1,async
      device: :/volume1/docker/traefik2/acme
  portainer_config:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/docker/portainer/data
  organizr_config:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/docker/organizr
  calibre-web_config:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/docker/calibre-web
  lazylibrarian_config:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/docker/lazylibrarian
  isponsorblocktv_config:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/docker/isponsorblocktv
  video:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/video
  audiobooks:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/audiobooks
  music:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/music
  photo:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/photo
  ebooks:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/ebooks
  downloads:
    driver_opts:
      type: nfs
      o: addr=192.168.0.6,rw,nfsvers=4.1,async
      device: :/volume1/downloads

########################### SERVICES
services:
  ############################# FRONTENDS

  # Traefik 2 - Reverse Proxy
  # Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600.
  # touch $DOCKERDIR/traefik2/acme/acme.json
  # chmod 600 $DOCKERDIR/traefik2/acme/acme.json
  # touch $DOCKERDIR/traefik2/traefik.log
  # Traefik 2 - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:2.4.5
    restart: unless-stopped
    depends_on:
      - socket-proxy
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.dsm-admin.address=:5001
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
#      - --api.insecure=true
#      - --serversTransport.insecureSkipVerify=true
      - --log=true
      # - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --log.level=ERROR # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/config/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/config/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/config/acme/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
    networks:
      t2_proxy:
        # ipv4_address: 192.168.90.254 # You can specify a static IP
      socket_proxy:
      default:
    extra_hosts:
      - "host.docker.internal:host-gateway"
    # security_opt:
      # - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
      - target: 5001
        published: 5001
        protocol: tcp
        mode: host
    volumes:
      - traefik_config:/config
      # - traefik_acme_config:/config/acme:ro
      - $LOCALDOCKERDIR/acme:/config/acme
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      # - "traefik.http.routers.traefik-rtr.tls=true"
      # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      # - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file"
      - "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file"

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    # image: fluencelabs/docker-socket-proxy
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    restart: always
    networks:
      socket_proxy:
        # ipv4_address: 192.168.91.254 # You can specify a static IP
    privileged: true
    ports:
      # - 2375 # Port 2375 should only ever get exposed to the internal network.
      - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network.
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=warning # debug,info,notice,warning,err,crit,alert,emerg
      - CONTAINERS=1
      - INFO=1
      - IMAGES=1
      - VOLUMES=1
      - NETWORKS=1
      - SERVICES=1
      - TASKS=1

  # Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    container_name: authelia
    # image: authelia/authelia:latest
    image: authelia/authelia:4.21.0
    restart: always
    networks:
      - t2_proxy
    expose:
      - 9091
    volumes:
      - authelia_config:/config
    environment:
      - TZ=$TZ
      # - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      # - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
      # - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/authelia_storage_mysql_password
      # - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/authelia_notifier_smtp_password
      # - AUTHELIA_DUO_API_SECRET_KEY_FILE=/run/secrets/authelia_duo_api_secret_key
    # secrets:
    #   - authelia_jwt_secret
    #   - authelia_session_secret
    #   - authelia_storage_mysql_password
    #   - authelia_notifier_smtp_password
    #   - authelia_duo_api_secret_key
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.authelia-rtr.entrypoints=https"
      - "traefik.http.routers.authelia-rtr.rule=Host(`authelia.$DOMAINNAME`)"
      - "traefik.http.routers.authelia-rtr.tls=true"
      # - "traefik.http.routers.authelia-rtr.tls.options=default"
      ## Middlewares
      - "traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.authelia-rtr.service=authelia-svc"
      - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"

  # Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    depends_on:
      - socket-proxy
    command: -H tcp://socket-proxy:2375
    networks:
      - t2_proxy
      - socket_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - portainer_config:/data
    environment:
      - TZ=$TZ
      - DOCKER_HOST="tcp://socket-proxy:2375"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
      - "traefik.http.routers.portainer-rtr.tls=true"
      ## Middlewares
      - 'traefik.http.routers.portainer-rtr.middlewares=chain-authelia@file'
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    image: clockworksoul/docker-gc-cron:latest
    container_name: dockergc
    restart: unless-stopped
    networks:
      - socket_proxy
    depends_on:
      - socket-proxy
    volumes:
      - $LOCALDOCKERDIR/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      - CRON="0 0 0 * * ?" # Everyday at midnight.
      - FORCE_IMAGE_REMOVAL="1"
      - FORCE_CONTAINER_REMOVAL="0"
      - GRACE_PERIOD_SECONDS="604800"
      - DRY_RUN="0"
      - CLEAN_UP_VOLUMES="1"
      - TZ=$TZ
      - DOCKER_HOST="tcp://socket-proxy:2375"

  # Organizr - Unified Frontend
  organizr:
    container_name: organizr
    hostname: organizr
    image: organizr/organizr
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
#    ports:
#      - "$ORGANIZR_PORT:80"
    volumes:
      - organizr_config:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.organizr-rtr.entrypoints=https"
      - "traefik.http.routers.organizr-rtr.rule=Host(`start.$DOMAINNAME`)"
      # - "traefik.http.routers.organizr-rtr.rule=Host(`$DOMAINNAME`,`www.$DOMAINNAME`)"
      - "traefik.http.routers.organizr-rtr.tls=true"
      ## Middlewares
      - 'traefik.http.routers.organizr-rtr.middlewares=chain-authelia@file'
      ## HTTP Services
      - "traefik.http.routers.organizr-rtr.service=organizr-svc"
      - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"

  # iSponsorBlockTV - YouTube auto blocker
  iSponsorBlockTV:
    container_name: isponsorblocktv
    image: ghcr.io/dmunozv04/isponsorblocktv
    restart: unless-stopped
    network_mode: host
    security_opt:
      - no-new-privileges:true
    volumes:
      - isponsorblocktv_config:/app/data
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ

  # Plex - Media Server
  plex:
    container_name: plex
    # image: mauimauer/plex # This was an attempt to get HW transcoding working with Ryzen
    # image: lscr.io/linuxserver/plex:latest
    image: plexinc/pms-docker:plexpass
    restart: unless-stopped
    networks:
      - t2_proxy
    # security_opt:
    #   - no-new-privileges:true
    volumes:
      - /usr/local/plex:/config # moving to NVME to see if I can get it to go faster
      - /tmp/plex_transcode:/transcode # moving transcoder to NVME also, need to monitor for size and then move to ram disk
      - video:/video
      - audiobooks:/audiobooks
      - music:/music
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - VERSION=public
      - PLEX_CLAIM=claim-pKLhV-iyXUFtWX-3Vw3Y
    devices:
      - /dev/dri:/dev/dri
    ports:
      - 32469:32469
      - 32400:32400
      - 32401:32401
      - 3005:3005
      - 8324:8324
      # - 1900:1900/udp # This is the SSDP / DNLA port.  Currently conflicts with HomeAssistant.  If they are moved to different VM's then I can re-enable this
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.plex-rtr.entrypoints=https"
      - "traefik.http.routers.plex-rtr.rule=Host(`plex.$DOMAINNAME`)"
      - "traefik.http.routers.plex-rtr.tls=true"
      ## Middlewares
      - 'traefik.http.routers.plex-rtr.middlewares=chain-authelia@file'
      ## HTTP Services
      - "traefik.http.routers.plex-rtr.service=plex-svc"
      - "traefik.http.services.plex-svc.loadbalancer.server.port=32400"

  # sonarr - TV Show downloader / organizer
  sonarr:
    container_name: sonarr
    image: lscr.io/linuxserver/sonarr:latest
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - sonarr_config:/config
      - video:/video
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME`)"
      - "traefik.http.routers.sonarr-rtr.tls=true"
      ## Middlewares
      - 'traefik.http.routers.sonarr-rtr.middlewares=chain-authelia@file'
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"

  # radarr - Movie Show downloader / organizer
  radarr:
    container_name: radarr
    image: lscr.io/linuxserver/radarr:latest
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - radarr_config:/config
      - video:/video
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME`)"
      - "traefik.http.routers.radarr-rtr.tls=true"
      ## Middlewares
      - 'traefik.http.routers.radarr-rtr.middlewares=chain-authelia@file'
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"

  # bazarr - TV Show downloader / organizer
  bazarr:
    container_name: bazarr
    image: lscr.io/linuxserver/bazarr:latest
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - bazarr_config:/config
      - video:/video
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.bazarr-rtr.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.$DOMAINNAME`)"
      - "traefik.http.routers.bazarr-rtr.tls=true"
      ## Middlewares
      - 'traefik.http.routers.bazarr-rtr.middlewares=chain-authelia@file'
      ## HTTP Services
      - "traefik.http.routers.bazarr-rtr.service=bazarr-svc"
      - "traefik.http.services.bazarr-svc.loadbalancer.server.port=6767"

  # sabnzb - NZB indexer search
  sabnzb:
    container_name: sabnzb
    image: lscr.io/linuxserver/sabnzbd
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - sabnzb_config:/config
      - downloads:/downloads
      - video:/video
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.sabnzb-rtr.entrypoints=https"
      - "traefik.http.routers.sabnzb-rtr.rule=Host(`sabnzb.$DOMAINNAME`)"
      - "traefik.http.routers.sabnzb-rtr.tls=true"
      ## Middlewares
      - 'traefik.http.routers.sabnzb-rtr.middlewares=chain-authelia@file'
      ## HTTP Services
      - "traefik.http.routers.sabnzb-rtr.service=sabnzb-svc"
      - "traefik.http.services.sabnzb-svc.loadbalancer.server.port=8080"

  # hydra - NZB indexer search
  hydra:
    container_name: hydra
    image: lscr.io/linuxserver/nzbhydra2:latest
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - hydra_config:/config
      - downloads:/downloads
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.hydra-rtr.entrypoints=https"
      - "traefik.http.routers.hydra-rtr.rule=Host(`hydra.$DOMAINNAME`)"
      - "traefik.http.routers.hydra-rtr.tls=true"
      ## Middlewares
      - 'traefik.http.routers.hydra-rtr.middlewares=chain-authelia@file'
      ## HTTP Services
      - "traefik.http.routers.hydra-rtr.service=hydra-svc"
      - "traefik.http.services.hydra-svc.loadbalancer.server.port=5076"

  # Calibre Web - interface to book library
  calibre-web:
    image: lscr.io/linuxserver/calibre-web
    container_name: calibre-web
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - DOCKER_MODS=linuxserver/calibre-web:calibre
    volumes:
      - calibre-web_config:/config
      - ebooks:/books
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.calibreweb-rtr.entrypoints=https"
      - "traefik.http.routers.calibreweb-rtr.rule=Host(`books.$DOMAINNAME`)"
      - "traefik.http.routers.calibreweb-rtr.tls=true"
      ## Middlewares
      - 'traefik.http.routers.calibreweb-rtr.middlewares=chain-authelia@file'
      ## HTTP Services
      - "traefik.http.routers.calibreweb-rtr.service=calibreweb-svc"
      - "traefik.http.services.calibreweb-svc.loadbalancer.server.port=8083"

  # Lazy Librarian - book indexer and download manager
  lazylibrarian:
    image: lscr.io/linuxserver/lazylibrarian
    container_name: lazylibrarian
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - DOCKER_MODS=linuxserver/calibre-web:calibre|linuxserver/mods:lazylibrarian-ffmpeg #optional
    volumes:
      - lazylibrarian_config:/config
      - downloads:/downloads
      - ebooks:/books
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.lazylib-rtr.entrypoints=https"
      - "traefik.http.routers.lazylib-rtr.rule=Host(`lazylib.$DOMAINNAME`)"
      - "traefik.http.routers.lazylib-rtr.tls=true"
      ## Middlewares
      - 'traefik.http.routers.lazylib-rtr.middlewares=chain-authelia@file'
      ## HTTP Services
      - "traefik.http.routers.lazylib-rtr.service=lazylib-svc"
      - "traefik.http.services.lazylib-svc.loadbalancer.server.port=5299"

  # This is for a Home Assistant instance.  homeassistant.io
  homeassistant:
    # image: lscr.io/linuxserver/homeassistant:latest
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: homeassistant
    restart: unless-stopped
    privileged: true
    network_mode: host
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - homeassistant_config:/config
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.homeassistant-rtr.entrypoints=https"
      - "traefik.http.routers.homeassistant-rtr.rule=Host(`homeassistant.$DOMAINNAME`)"
      - "traefik.http.routers.homeassistant-rtr.tls=true"
      ## Middlewares
      - 'traefik.http.routers.homeassistant-rtr.middlewares=chain-authelia@file'
      ## HTTP Services
      - "traefik.http.routers.homeassistant-rtr.service=homeassistant-svc"
      - "traefik.http.services.homeassistant-svc.loadbalancer.server.port=8123"

  # This is for the cron that updates the slideshow file
  slideshow-updater:
    container_name: slideshow-updater
    image: ghcr.io/neybar/pi_slide_show:master
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $LOCALDOCKERDIR/slideshow_updater/generate_slideshow.yml:/usr/src/pi_slide_show/generate_slideshow.yml
      - photo:/mnt/photo
      - "/etc/localtime:/etc/localtime:ro"

  # touch pihole.log
  # Verify that port 53 is available: https://www.linuxuprising.com/2020/07/ubuntu-how-to-free-up-port-53-used-by.html
  pihole:
    container_name: pihole
    hostname: pihole
    image: pihole/pihole:latest
    restart: unless-stopped
    networks:
      - t2_proxy
    dns:
      - 127.0.0.1
      - 1.1.1.1
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      WEBPASSWORD: $PIHOLE_PWD
      VIRTUAL_HOST: pihole.$DOMAINNAME
      DNS1: 1.1.1.1
      DNS2: 1.0.0.1
      ADMIN_EMAIL: $EMAIL
      ServerIP: $HOST_IP
      PROXY_LOCATION: pihole.$DOMAINNAME
      DNSMASQ_USER: pihole
      DNSSEC: "true"
      CONDITIONAL_FORWARDING: "true"
      CONDITIONAL_FORWARDING_IP: 192.168.0.1
      CONDITIONAL_FORWARDING_DOMAIN: home.$DOMAINNAME
      CONDITIONAL_FORWARDING_REVERSE: 0.168.192.in-addr.arpa
    volumes:
      - $LOCALDOCKERDIR/pihole/pihole:/etc/pihole
      - $LOCALDOCKERDIR/pihole/dnsmasq.d:/etc/dnsmasq.d
      - $LOCALDOCKERDIR/pihole/pihole.log:/var/log/pihole.log
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.pihole-rtr.entrypoints=https"
      - "traefik.http.routers.pihole-rtr.rule=Host(`pihole.$DOMAINNAME`)"
      - "traefik.http.routers.pihole-rtr.tls=true"
      ## Middlewares
      - 'traefik.http.routers.pihole-rtr.middlewares=chain-authelia@file'
      ## HTTP Services
      - "traefik.http.routers.pihole-rtr.service=pihole-svc"
      - "traefik.http.services.pihole-svc.loadbalancer.server.port=80"
